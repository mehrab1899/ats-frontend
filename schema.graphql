type AuthPayload {
  token: String!
}

type Query {
  _: Boolean
  publicJobs: [Job!]!
  jobs(search: String, status: JobStatus, skip: Int = 0, take: Int = 10): JobsResponse!
  getJobById(id: ID!): Job!
  applicants(search: String, stage: Stage, first: Int, after: String, last: Int, before: String): ApplicantConnection!
  getApplicantById(id: ID!): Applicant!
  dashboardStats: DashboardStats!
  monthlyTrends: [MonthlyStats!]!
}

type Mutation {
  signup(email: String!, password: String!, firstName: String, lastName: String): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createJob(input: JobInput!): Job!
  updateJob(id: ID!, input: JobInput!): Job!
  updateJobStatus(id: ID!, status: JobStatus!): Job!
  submitApplicationText(input: ApplicantTextInput!, cv: Upload!, coverLetter: Upload!): Applicant!
  updateApplicantStage(id: ID!, stage: Stage!): ApplicantRow!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum JobStatus {
  OPEN
  CLOSED
  DRAFT
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

type Job {
  id: ID!
  title: String!
  description: String!
  status: JobStatus!
  type: JobType!
  applicants: Int!
  skillsRequired: JSON!
  benefits: JSON!
  createdAt: String!
  context: String
}

type JobsResponse {
  jobs: [Job!]!
  totalJobsCount: Int!
}

input JobInput {
  title: String!
  description: String!
  status: JobStatus
  type: JobType
  skillsRequired: JSON!
  benefits: JSON!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

enum Stage {
  APPLIED
  SHORTLISTED
  INTERVIEWED
  HIRED
  REJECTED
}

type ApplicantRow {
  id: ID!
  name: String!
  email: String!
  stage: Stage!
  position: String!
  appliedAt: String!
}

type ApplicantsResponse {
  applicants: [ApplicantRow!]!
  totalApplicantsCount: Int!
}

type ApplicantEdge {
  node: ApplicantRow!
  cursor: String!
}

type ApplicantConnection {
  edges: [ApplicantEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type JobRef {
  id: ID!
  title: String!
}

type Applicant {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  jobId: ID!
  job: JobRef!
  stage: Stage!
  cv: String!
  coverLetter: String!
  message: String
  appliedAt: String!
}

input ApplicantTextInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  jobId: ID!
  message: String
}

type DashboardStats {
  activeJobs: Int!
  totalApplicants: Int!
  topJob: String!
  shortlistedCount: Int!
}

type MonthlyStats {
  month: String!
  jobs: Int!
  applicants: Int!
  hired: Int!
}